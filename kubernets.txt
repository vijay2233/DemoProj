How to install kubernetes on AmazonLinux Process:  https://capgemini.udemy.com/course/valaxy-devops/learn/lecture/29974938#overview
-------------------------------------------------
Setup Kubernetes on Amazon EKS
You can follow same procedure in the official AWS document Getting started with Amazon EKS – eksctl

Pre-requisites:
an EC2 Instance
Install AWSCLI latest verison
1. Setup kubectl
   a. Download kubectl version 1.21
   b. Grant execution permissions to kubectl executable
   c. Move kubectl onto /usr/local/bin
   d. Test that your kubectl installation was successful

curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
chmod +x ./kubectl
mv ./kubectl /usr/local/bin 
kubectl version --short --client

2. Setup eksctl
   a. Download and extract the latest release
   b. Move the extracted binary to /usr/local/bin
   c. Test that your eksclt installation was successful
 
curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
eksctl version

3. Create an IAM Role and attache it to EC2 instance
   Note: create IAM user with programmatic access if your bootstrap system is outside of AWS
   IAM user should have access to
   IAM
   EC2
   CloudFormation
   
   
4. Create your cluster and nodes
   eksctl create cluster --name cluster-name  \
--region region-name \
--node-type instance-type \
--nodes-min 2 \
--nodes-max 2 \ 
--zones <AZ-1>,<AZ-2>

example:
eksctl create cluster --name vijay-cluster \
   --region us-east-1 \
--node-type t2.small \


5. To delete the EKS clsuter
   eksctl delete cluster vijay-cluster --region us-east-1
   
  
6. Validate your cluster using by creating by checking nodes and by creating a pod
   kubectl get nodes
   kubectl run tomcat --image=tomcat 
   
   
7. Deploying Nginx Container
   kubectl create deployment  demo-nginx --image=nginx --replicas=2 --port=80
   # kubectl deployment regapp --image=valaxy/regapp --replicas=2 --port=8080
     kubectl get all
     kubectl get pod
	 
	 
8. Expose the deployment as service. This will create an ELB in front of those 2 containers and allow us to publicly access them.

   kubectl expose deployment demo-nginx --port=80 --type=LoadBalancer
   # kubectl expose deployment regapp --port=8080 --type=LoadBalancer
   kubectl get services -o wide
   
   
======================================================================================================================================
[root@ip-10-1-2-200 ~]# cat pod.yml
apiVersion: v1
kind: Pod
metadata:
  name: demo-pod
  labels:
    app: demo-app
spec:
  containers:
    - name: demo-nginx
      image: nginx
      ports:
        - name: demo-nginx
          containerPort: 80

[root@ip-10-1-2-200 ~]# cat service.yml
apiVersion: v1
kind: Service
metadata:
  name: demo-service
spec:
  ports:
  - name: nginx-port
    port: 80
    targetPort: 80

  selector:
    app: demo-app

  type: LoadBalancer

[root@ip-10-1-2-200 ~]# kubectl get all
NAME           READY   STATUS    RESTARTS   AGE
pod/demo-pod   1/1     Running   0          23m

NAME                   TYPE           CLUSTER-IP     EXTERNAL-IP                                                              PORT(S)        AGE
service/demo-service   LoadBalancer   10.100.5.183   a3c1715aa18f246999bd168de3a0311f-723149036.us-east-1.elb.amazonaws.com   80:31439/TCP   21m
service/kubernetes     ClusterIP      10.100.0.1     <none>                                                                   443/TCP        3h27m
[root@ip-10-1-2-200 ~]#
================================================================================================================================================
Kubectl Command Cheatsheet:
----------------------------
Cluster Management:
---------------------
1.Display endpoint information about the master and services in the cluster

kubectl cluster-info
 
2.Display the Kubernetes version running on the client and server

kubectl version
 

3.Get the configuration of the cluster

kubectl config view
 

4.List the API resources that are available

kubectl api-resources
 

5.List the API versions that are available

kubectl api-versions
 

6.List everything

kubectl get all --all-namespaces
 

Daemonsets
Shortcode = ds

7.List one or more daemonsets

kubectl get daemonset
 

8.Edit and update the definition of one or more daemonset

kubectl edit daemonset <daemonset_name>
 

9.Delete a daemonset

kubectl delete daemonset <daemonset_name>
 

10.Create a new daemonset

kubectl create daemonset <daemonset_name>
 

11.Manage the rollout of a daemonset

kubectl rollout daemonset
 

12.Display the detailed state of daemonsets within a namespace

kubectl describe ds <daemonset_name> -n <namespace_name>
 

Deployments
----------------
Shortcode = deploy

List one or more deployments

kubectl get deployment
 

13.Display the detailed state of one or more deployments

kubectl describe deployment <deployment_name>
 

14.Edit and update the definition of one or more deployment on the server

kubectl edit deployment <deployment_name>
 

15.Create one a new deployment

kubectl create deployment <deployment_name>
 

16.Delete deployments

kubectl delete deployment <deployment_name>
 

17.See the rollout status of a deployment

kubectl rollout status deployment <deployment_name>
 

Events
--------
Shortcode = ev

18.List recent events for all resources in the system

kubectl get events
 

19.List Warnings only

kubectl get events --field-selector type=Warning
 

20.List events but exclude Pod events

kubectl get events --field-selector involvedObject.kind!=Pod
 

21.Pull events for a single node with a specific name

kubectl get events --field-selector involvedObject.kind=Node, involvedObject.name=<node_name>
 

22.Filter out normal events from a list of events

kubectl get events --field-selector type!=Normal
 

Logs
-----

23.Print the logs for a pod

kubectl logs <pod_name>
 

24.Print the logs for the last hour for a pod

kubectl logs --since=1h <pod_name>
 

25.Get the most recent 20 lines of logs

kubectl logs --tail=20 <pod_name>
 

26.Get logs from a service and optionally select which container

kubectl logs -f <service_name> [-c <$container>]
 

27.Print the logs for a pod and follow new logs

kubectl logs -f <pod_name>
 

28.Print the logs for a container in a pod

kubectl logs -c <container_name> <pod_name>
 

29.Output the logs for a pod into a file named ‘pod.log’

kubectl logs <pod_name> pod.log
 

30.View the logs for a previously failed pod

kubectl logs --previous <pod_name>
 

31.For logs we also recommend using a tool developed by Johan Haleby called Kubetail. This is a bash script that will allow you to get logs from multiple pods simultaneously. You can learn more about it at its Github repository. Here are some sample commands using Kubetail.

 

Get logs for all pods named with pod_prefix

32.kubetail <pod_prefix>
 

33.Include the most recent 5 minutes of logs

kubetail <pod_prefix> -s 5m
 

Manifest Files
-------------- 
Another option for modifying objects is through Manifest Files. We highly recommend using this method. It is done by using yaml files with all the necessary options for objects configured. We have our yaml files stored in a git repository, so we can track changes and streamline changes.

 

34.Apply a configuration to an object by filename or stdin. Overrides the existing configuration.

kubectl apply -f manifest_file.yaml
 

Create objects
-------------
kubectl create -f manifest_file.yaml
 

35.Create objects in all manifest files in a directory

kubectl create -f ./dir
 

Create objects from a URL

36.kubectl create -f ‘url’
 

37.Delete an object

kubectl delete -f manifest_file.yaml
 

Namespaces
---------------
Shortcode = ns

38.Create namespace <name>

kubectl create namespace <namespace_name>
 

38.List one or more namespaces

kubectl get namespace <namespace_name>
 

39.Display the detailed state of one or more namespace

kubectl describe namespace <namespace_name>
 

40.Delete a namespace

kubectl delete namespace <namespace_name>
 

41.Edit and update the definition of a namespace

kubectl edit namespace <namespace_name>
 

42.Display Resource (CPU/Memory/Storage) usage for a namespace

kubectl top namespace <namespace_name>
 

Nodes
-------
Shortcode = no

43.Update the taints on one or more nodes

kubectl taint node <node_name>
 

44.List one or more nodes

kubectl get node
 

45.Delete a node or multiple nodes

kubectl delete node <node_name>
 

46.Display Resource usage (CPU/Memory/Storage) for nodes

kubectl top node
 

47.Resource allocation per node

kubectl describe nodes | grep Allocated -A 5
 

48.Pods running on a node

kubectl get pods -o wide | grep <node_name>
 

49.Annotate a node

kubectl annotate node <node_name>
 

50.Mark a node as unschedulable

kubectl cordon node <node_name>
 

51.Mark node as schedulable

kubectl uncordon node <node_name>
 

52.Drain a node in preparation for maintenance

kubectl drain node <node_name>
 

53.Add or update the labels of one or more nodes

kubectl label node
 

Pods
-----
Shortcode = po

54.List one or more pods

kubectl get pod
 

55.Delete a pod

kubectl delete pod <pod_name>
 

56.Display the detailed state of a pods

kubectl describe pod <pod_name>
 

56.Create a pod

kubectl create pod <pod_name>
 

57.Execute a command against a container in a pod

kubectl exec <pod_name> -c <container_name> <command>
 

58.Get interactive shell on a a single-container pod

kubectl exec -it <pod_name> /bin/sh
 

59.Display Resource usage (CPU/Memory/Storage) for pods

kubectl top pod
 

60.Add or update the annotations of a pod

kubectl annotate pod <pod_name> <annotation>
 

61.Add or update the label of a pod

kubectl label pod <pod_name>
 

Replication Controllers
-----------------------
Shortcode = rc

62.List the replication controllers

kubectl get rc
 

63.List the replication controllers by namespace

kubectl get rc --namespace=”<namespace_name>”
 

ReplicaSets
------------
Shortcode = rs

64.List ReplicaSets

kubectl get replicasets
 

65.Display the detailed state of one or more ReplicaSets

kubectl describe replicasets <replicaset_name>
 

66.Scale a ReplicaSet

kubectl scale --replicas=[x] 
 

Secrets
--------
Create a secret

67.kubectl create secret
 

68.List secrets

kubectl get secrets
 

69.List details about secrets

kubectl describe secrets
 

70.Delete a secret

kubectl delete secret <secret_name>
 

Services
----------
Shortcode = svc

71.List one or more services

kubectl get services
 

72.Display the detailed state of a service

kubectl describe services
 

73.Expose a replication controller, service, deployment or pod as a new Kubernetes service

kubectl expose deployment [deployment_name]
 

74.Edit and update the definition of one or more services

kubectl edit services
 

75.Service Accounts
-----------------
Shortcode = sa

76.List service accounts

kubectl get serviceaccounts
 

77.Display the detailed state of one or more service accounts

kubectl describe serviceaccounts
 

78.Replace a service account

kubectl replace serviceaccount
 

79.Delete a service account

kubectl delete serviceaccount <service_account_name>
 

80.StatefulSet
Shortcode = sts

81List StatefulSet

kubectl get statefulset
 

82.Delete StatefulSet only (not pods)

kubectl delete statefulset/[stateful_set_name] --cascade=false
 

83.Common Options
-------------------
In Kubectl you can specify optional flags with commands. Here are some of the most common and useful ones.

 

84. -o Output format. For example if you wanted to list all of the pods in ps output format with more information.

kubectl get pods -o wide 
 

85. -n Shorthand for --namespace. For example, if you’d like to list all the Pods in a specific Namespace you would do this command:

kubectl get pods --namespace=[namespace_name]
 

kubectl get pods -n=[namespace_name]
 

86. -f Filename, directory, or URL to files to use to create a resource. For example when creating a pod using data in a file named newpod.json.

kubectl create -f ./newpod.json
 